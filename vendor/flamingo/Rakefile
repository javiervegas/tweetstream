#
# Simple example: reads from a subscription queue, writes the events to STDOUT
#
# Usage (from this directory):
#   $ QUEUE=EXAMPLES rake resque:work

require 'rake'
require 'rubygems'
require 'redis'
require 'resque/tasks'
require "json"
require 'flamingo'
require 'tweetstream'
require "video_info"
require 'andand'

task :redis do
# redis-server (opens port 6379)
  exec 'redis-server'
end

task :resque  do
# resque-web (opens port 5678)
  exec 'resque-web'
end

task :flamingod do
  exec 'flamingod','flamingo.yml'
end

# Add your own tasks in files placed in lib/tasks ending in .rake,
# for example lib/tasks/capistrano.rake, and they will automatically be available to Rake.

# Usage (from this directory):
#   $ QUEUE=EXAMPLES bundle exec rake resque:work

class HandleFlamingoEvent
  # type: One of "tweet" or "delete"
  # event: a hash of the json data from twitter
  #
  #def self.perform(type, event_info, event)

  @redis = Redis.new
  def self.perform(type, event)
    video = Hash.new
    event["entities"]["urls"].map{ |entry| (entry["expanded_url"] || entry["url"]) }.compact.each do |url|
      id = url.andand.scan(/youtube.com\/watch\?v=([-\w]+)/).first
      if !id.nil?
        #puts id
        video[:videoid] = id
        #puts video[:videoid] 
        video[:url] = url
      end
    end
    # id = url.andand.scan(/youtube.com\/watch\?v=([-\w]+)/).first #|| @videorurl.scan(/youtu\.be\/([-\w]+)/).first || @videorurl.scan(/vimeo.com\/\D*(\d+)/).first
    if !video[:videoid].nil?
      video[:info] = VideoInfo.new(video[:url])
      event[:video] = video
      status = TweetStream::Status.new event
      puts @redis.set type, status.to_json
    end
  end
end

